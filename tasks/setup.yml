---
- name: Register IDE available versions
  ansible.builtin.set_fact:
    ide_available_versions: '{{ releases.json[ide.code] | map(attribute="version") }}'

- name: Verify requested IDE version is valid
  ansible.builtin.assert:
    that: 'ide.version in ide_available_versions'
    msg: 'version {{ ide.version }} not found, availables ones are: {{ ide_available_versions }}'
  when: ide.version | lower != 'latest'

- name: Ensure installation directory exists on target
  ansible.builtin.file:
    path: '{{ jetbrains_installation_dir }}/{{ jetbrains_code_map[ide.code] }}/{{ ide.version }}'
    state: directory
    owner: '{{ jetbrains_user }}'
    group: '{{ jetbrains_user }}'
    mode: '755'
  register: created_ide_directory

- name: Extract tarball
  ansible.builtin.unarchive:
    src: '{{ (releases.json[ide.code] | selectattr("version", "eq", ide.version) | first).downloads.linux.link }}'
    dest: '{{ created_ide_directory.path }}'
    list_files: true
    remote_src: true
    extra_opts:
      - --strip-components=1
  when: created_ide_directory.changed or jetbrains_force_reinstall | bool

- name: Read product-info.json
  ansible.builtin.slurp:
    src: '{{ created_ide_directory.path }}/product-info.json'
  register: product_info

- name: Save json data to variable
  ansible.builtin.set_fact:
    product_info: '{{ product_info.content | b64decode | from_json }}'

- name: Ensure desktop launcher exists
  ansible.builtin.template:
    src: templates/launcher.desktop.j2
    dest: '{{ jetbrains_launcher_dir }}/{{ product_info.launch.0.startupWmClass }}.desktop'
    owner: '{{ jetbrains_user }}'
    group: '{{ jetbrains_user }}'
    mode: '644'

- name: Ensure link to executable exists
  ansible.builtin.file:
    src: '{{ created_ide_directory.path }}/{{ product_info.launch.0.launcherPath }}'
    dest: '{{ jetbrains_binary_dir }}/{{ product_info.name | lower }}'
    state: link
    owner: '{{ jetbrains_user }}'
    group: '{{ jetbrains_user }}'
  when: jetbrains_link_executable | bool

- name: Find previously installed IDE versions
  ansible.builtin.find:
    path: '{{ created_ide_directory.path | dirname }}'
    file_type: directory
    recurse: false
    excludes: '{{ created_ide_directory.path | basename }}'
  register: other_versions

- name: Ensure previously installed IDE versions are removed
  ansible.builtin.file:
    path: '{{ item.path }}'
    state: absent
  loop: '{{ other_versions.files }}'
  when: jetbrains_remove_other_versions | bool
