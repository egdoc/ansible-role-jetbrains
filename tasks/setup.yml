---
- name: Retrieve and set IDE facts
  ansible.builtin.import_tasks:
    file: set_facts.yml

- name: Ensure installation directory exists on target
  ansible.builtin.file:
    path: '{{ ide_directory }}'
    state: directory
    owner: root
    group: root
    mode: '755'

- name: Extract tarball
  ansible.builtin.unarchive:
    src: '{{ ide_download_url }}'
    dest: '{{ ide_directory }}'
    list_files: true
    remote_src: true
    extra_opts:
      - --strip-components=1

- name: Read product-info.json
  ansible.builtin.command: cat {{ ide_directory }}/product-info.json
  register: cat
  changed_when: false

- name: Save json data to variable
  ansible.builtin.set_fact:
    product_info: '{{ cat.stdout | from_json }}'

- name: Ensure desktop launcher exists
  ansible.builtin.template:
    src: templates/launcher.desktop.j2
    dest: '/usr/local/share/applications/{{ product_info.launch.0.startupWmClass }}.desktop'
    owner: root
    group: root
    mode: '644'

- name: Ensure link to executable exists
  ansible.builtin.file:
    src: '{{ ide_directory }}/{{ product_info.launch.0.launcherPath }}'
    dest: /usr/local/bin/{{ product_info.name | lower }}
    state: link
    owner: root
    group: root
  when: jetbrains_link_executable | bool

- name: Find previously installed IDE versions
  ansible.builtin.find:
    path: '{{ jetbrains_installation_dir }}/{{ jetbrains_code_map[ide.code] }}'
    file_type: directory
    recurse: false
    excludes: '{{ ide_effective_version }}'
  register: other_versions

- name: Ensure previously installed IDE versions are removed
  ansible.builtin.file:
    path: '{{ item.path }}'
    state: absent
  loop: '{{ other_versions.files }}'
  when: jetbrains_remove_other_versions | bool
